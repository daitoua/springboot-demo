<?xml version="1.0" encoding="UTF-8" ?>

<!--
 scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
 scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
 debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
 -->



<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!-- LoggerContextListener 接口的实例能监听 logger context 上发生的事件，比如说日志级别的变化 -->
    <contextListener class="ch.qos.logback.classic.jul.LevelChangePropagator">
        <resetJUL>true</resetJUL>
    </contextListener>



    <!-- 彩色日志 -->
    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />
    <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />
    <!-- 彩色日志格式 -->
    <property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}" />
    <!-- Console 输出设置 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>utf8</charset>
        </encoder>
    </appender>


    <!-- 控制台日志输出信息 -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符  [%d{HH:mm:ss.SSS} %logger{36} - %msg%n]-->
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>

        </encoder>
    </appender>
    <!-- 将org.springframework.web包下的类日志级别设置为DEBUG，我们开发springMVC经常出现和参数类型相关的4XX错误，设置此项我们会看到更详细的错误信息  -->
    <logger name="org.springframework.web" level="error"></logger>

    <!-- 定义log文件的目录 -->
    <property name="LOG_HOME" value="/Users/daitou/logs"></property>
<!--    <property name="LOG_HOME" value="/java/yt/web/logs"></property>-->
    <!--<property name="LOG_HOME" value="/home/www/logs/ydsh-wx-minipro/"></property>-->
    <!-- 自定义日志信息 -->
    <appender name="all_info" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 支持多JVM同时操作同一个日志文件 -->
        <prudent>true</prudent>
        <!-- 定义打印级别-info -->
        <!--<filter class="ch.qos.logback.classic.filter.ThresholdFilter">-->
        <!--<level>DEBUG</level>-->
        <!--</filter>-->
        <!-- 输出位置 可以结合LOG_HOME用如：${LOG_HOME}/xxxxx.log -->
        <!--<File>${LOG_HOME}/log/hiaapp_info.log</File>-->

        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <FileNamePattern>${LOG_HOME}/video_info.log.%d{yyyy-MM-dd}.log</FileNamePattern>
            <!--日志文件保留天数-->
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
        </encoder>
        <!--日志文件最大的大小-->
        <!--<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">-->
        <!--<MaxFileSize>10MB</MaxFileSize>-->
        <!--</triggeringPolicy>-->
    </appender>


    <appender name="all_error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <prudent>true</prudent>
        <filter class="ch.qos.logback.classic.filter.LevelFilter"><!-- 只打印错误日志 -->
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!--<File>${LOG_HOME}/log/hisapp_error.log</File>-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${LOG_HOME}/video_error.%d{yyyy-MM-dd}.log</FileNamePattern>
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
        <!--<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">-->
        <!--<MaxFileSize>10MB</MaxFileSize>-->
        <!--</triggeringPolicy>-->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <Pattern>${CONSOLE_LOG_PATTERN}</Pattern>
        </layout>
    </appender>


    <root level="info">
        <appender-ref ref="console" />
        <appender-ref ref="all_info" level="debug,info"/> <!-- all INFO -->
        <appender-ref ref="all_error" level="error"/> <!-- all ERROR -->
        <!--<appender-ref ref="console"/> &lt;!&ndash; console &ndash;&gt;-->
    </root>
</configuration>